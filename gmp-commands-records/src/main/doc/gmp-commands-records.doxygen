/*!
\page comm_records GMP Commands Records

This bundle provides provides CAD, CAR and APPLY EPICS records using the \ref cas.

\section comm_records_provides_sec Provided Services
This bundle provides Java implementations of the Gemini APPLY, CAD and CAR records. It instantiates one
\ref edu.gemini.gmp.commands.records.RecordFactory, which will instantiate one or more APPLY records, with CAD records
 as specified in the configuration file. These CAD records can be the ones matching Gemini sequence commands, or configuration
 records, which hold the different parameters that will go in the APPLY sequence command to the instrument. Each
 CAD and APPLY record has an associated CAR record. The CAR record associated with an APPLY
provides a summary of all the CARs associated with its linked CADs. For specifications about the behavior of these records in Gemini in
general, please refer to
Gemini ICDs 1a and 1b, or to the documentation at \ref gemrec, particularly \ref gemapply, \ref gemcad and \ref gemcar.
For the details of the specific implementation provided here, please refer to \ref comm_records_notes_sec.

\section comm_records_requires_sec Required Services
This bundle requires the \ref edu.gemini.cas.ChannelAccessServer "ChannelAccessServer" OSGI service, provided by
\ref cas bundle, the \ref edu.gemini.aspen.giapi.commands.CommandSender "CommandServer" OSGI service, provided by
the \ref gmp-commands bundle, and the \ref edu.gemini.aspen.gmp.top.Top "Top" OSGI service, provided by the
\ref gmp_epics_top bundle.

\section comm_records_configuration_sec Configuration
  This bundle has its main configuration file in \ref edu.gemini.gmp.commands.records.RecordFactory-default.cfg.
  There, you can set the name of the file where the \ref edu.gemini.gmp.commands.records.RecordFactory
   configuration is defined. The default is
  \ref giapi-apply-config.xml and it can be used as an example. The schema file to which said configuration
  must adhere is \ref giapi-apply-config.xsd. For example:
  \verbatim
      <Apply name="apply">
          <SequenceCommand>TEST</SequenceCommand>
          <SequenceCommand>VERIFY</SequenceCommand>
      </Apply>
  \endverbatim
  will create the APPLY record \$(top):apply linked to the CAD records \$(top):test (with CAR \$(top):textC),
  \$(top):verify (with CAR \$(top):verifyC), and a CAR record \$(top):applyC that reflects the state of the previously
   mentioned CARs.

   \verbatim
        <Apply name="ao:apply">
            <ConfigRecord name="ao:config">
                <ConfigSet name="configCal">
                    <field>useCal</field>
                    <field>magnitudeH</field>
                </ConfigSet>
            </ConfigRecord>
            <SequenceCommand>GUIDE</SequenceCommand>
            <SequenceCommand>END_GUIDE</SequenceCommand>
        </Apply>
   \endverbatim
   will create the APPLY record \$(top):ao:apply linked to the CAD records \$(top):guide (with CAR \$(top):guideC),
   \$(top):endGuide (with CAR \$(top):endGuideC), \&(top):ao:config (with CAR \$(top):ao:configC) with EPICS channels
   \$(top):configCal.useCal and \$(top):configCal.magnitudeH (of type STRING), and a CAR record \$(top):ao:applyC that
   reflects the state of the previously mentioned CARs.


\section comm_records_notes_sec Notes
\subsection apply_sec GIAPI APPLY Record
The APPLY record described in \ref gemapply has been simplified to the minimum required by the Gemini OCS from a
functional point of view. The fields implemented
as EPICS channels are VAL, CLID, DIR, MESS and OMSS.

The internal logic is as similar as possible to the one specified in \ref gemapply. Specifically, when a write is
detected in the DIR channel:
\li if directive is START, increase the value of the CLID channel.
\li set the associated CAR record to BUSY.
\li ignore any MARK directives
\li if directive is START, process a PRESET first
\li for every CAD, set the DIR and ICID channels, and wait for the return value in the CAD's VAL channel.
\li if the return value != 0, write 0 in the APPLY's VAL, and set the error message, else, write CLID in VAL.
\li if all CAR records are IDLE, put the master CAR to IDLE. If one of them is in ERROR, put the master CAR in ERROR.
\li if the master CAR stays BUSY, it will go to IDLE as soon as all CAR records go to IDLE.

This record is implemented in \ref edu.gemini.gmp.commands.records.ApplyRecord with 2 inner classes for listeners
\ref edu.gemini.gmp.commands.records.ApplyRecord.DirListener and \ref edu.gemini.gmp.commands.records.ApplyRecord.CarListener.
The first one initiates the record processing when a directive is written to the DIR EPICS channel. The second one takes
care of updating the APPLY's CAR record when one of the 'child' CARs changes state.

\subsection cad_sec GIAPI CAD Record
The CAD record described in \ref gemcad has been simplified to the minimum required by the Gemini OCS  from a
functional point of view. The fields implemented are VAL, ICID, DIR, MESS and OMSS, basically the same as the APPLY
record, except the client ID field has another name.

The internal logic has been implemented as close as possible to the one specified in \ref gemcad. The Associated CAR
record only goes to BUSY when a command(PRESET, CANCEL, START or PRESET_START) is sent to the instrument.

This records is implemented in several classes. First \ref edu.gemini.gmp.commands.records.CadRecordImpl takes
care of instantiating the other classes. Inner classes \ref edu.gemini.gmp.commands.records.CadRecordImpl.AttributeListener and
\ref edu.gemini.gmp.commands.records.CadRecordImpl.DirListener take care of changing the CADs state to MARKED when an attribute
is written to, and initiate the record processing when a directive is written to the DIR EPICS channel respectively.
The state transitions and actual sending of the commands are implemented in \ref edu.gemini.gmp.commands.records.CadState.

Finally, \ref edu.gemini.gmp.commands.records.EpicsCad encapsulates the EPICS channels of the CAD record.

\subsection car_sec GIAPI CAR Record
The CAR record described in \ref gemcar has been simplified to the minimum required by the Gemini OCS from a
functional point of view. There is one CAR per CAD record, ane one CAR record linked to each APPLY record, which
summarizes the state of its 'child' CARs.
The fields implemented
as EPICS channels are VAL, OMSS, OERR and CLID. The GIAPI CAR record has no internal logic, it is controlled by the CAD
and APPLY records.
Whether the master CAR record is IDLE or BUSY, it will contain the client ID of the last processed APPLY.

The CAR record implemented in \ref edu.gemini.gmp.commands.records.CarRecord is fairly simple, just a collection
of EPICS channels and some methods to manipulate its state.

\section comm_records_troubleshooting_sec Troubleshooting

If something goes wrong, and you want the records to go to a clean state, you have three options:

\subsection comm_records_clear_sec The CLEAR directive
If any of the CAR records is stuck in any state but IDLE, the first thing to try is to send a CLEAR directive to its
corresponding CAD. For example, if \$(top):testC.VAL equals ERR, you can write CLEAR in \$(top):test.DIR and the CAR
should go to IDLE and the CAD to a CLEAR state.

If there are several CARs/CADs in problem, you can mark them all (issuing the MARK directive or changing any of their
attributes) and then issue a CLEAR to their APPLY record.

\subsection comm_records_reset_sec The resetRecords channel
If the problem persists, or the problem is at a lower level (i.e. missing EPICS channels), you can try writing RESET to
\$(top):gmp:resetRecords. This will destroy all the EPICS channels of the APPLY, CAD and CAR records, and recreate them.

\subsection comm_records_restart_sec Restarting
Finally, your last resort short of restarting the GMP, is to stop and restart the GMP Commands Records bundle.






*/

